/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package beam.scottygui.Alerts;

import static beam.scottygui.Stores.CS.GUISettings;
import beam.scottygui.Utils.HTTP;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTextPane;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author tjhasty
 */
public final class AlertFrame extends javax.swing.JFrame {

    public List<String> FollowerCache = new ArrayList();
    public JSONParser parser = new JSONParser();
    HTTP http = new HTTP();
    public boolean PlayingAudio = false;
    public boolean ShowingImg = false;

    /**
     * Creates new form AlertFrame
     */
    public AlertFrame() {
        initComponents();
        //StartFollowerWatcher();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AlertBG = new javax.swing.JPanel();
        ImageViewer = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(21, 0), new java.awt.Dimension(21, 0), new java.awt.Dimension(21, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 13), new java.awt.Dimension(0, 13), new java.awt.Dimension(32767, 13));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Alert Pane");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AlertBG.setBackground(new java.awt.Color(51, 255, 51));
        AlertBG.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        AlertBG.add(ImageViewer, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 590, 425));

        getContentPane().add(AlertBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jButton1.setText("Test Followers");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 460, -1, -1));
        getContentPane().add(filler1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, 640, 10));
        getContentPane().add(filler2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 0, 10, 500));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
Player playMP3 = null;

    public void BeginAlert(String Follower) {
        //System.out.println("New Follower Detected > " + Follower);
        if (this.isVisible()) {
            this.StartAudio();
            this.StartImage(Follower);
        }
    }

    public void StartAudio() {
        PlayingAudio = true;
        new Thread("Sound Alert!") {
            @Override
            public void run() {
                FileInputStream fis = null;
                try {
                    fis = new FileInputStream(GUISettings.get("FollowSound").toString());
                } catch (Exception ex) {
                    //Logger.getLogger(AlertFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    if (GUISettings.containsKey("FollowSound")) {
                        playMP3 = new Player(fis);
                    } else {
                        playMP3 = new Player(this.getClass().getResourceAsStream("/assets/gir_follow.mp3"));
                    }
                    playMP3.play();
                    PlayingAudio = false;
                } catch (JavaLayerException ex) {
                    Logger.getLogger(AlertFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }.start();
    }

    public void StartImage(final String Follower) {
        ShowingImg = true;
        String FollowMessage = Follower + " has followed!";
        if (GUISettings.containsKey("FollowerMSG")) {
            FollowMessage = GUISettings.get("FollowerMSG").toString().replace("(_follower_)", Follower);
        }
        final JTextPane textPane = new JTextPane();
        textPane.setText(FollowMessage);
        textPane.setEditable(false);
        textPane.setOpaque(false);
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        StyledDocument doc = textPane.getStyledDocument();
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        textPane.setBounds(ImageViewer.getBounds());
        String FontName = "Arial";
        if (GUISettings.containsKey("FFontName")) {
            FontName = GUISettings.get("FFontName").toString();
        }
        int FontSize = 64;
        if (GUISettings.containsKey("FFontSize")) {
            FontSize = Integer.parseInt(GUISettings.get("FFontSize").toString());
        }
        int FontStyle = 0;
        if (GUISettings.containsKey("FFontStyle")) {
            FontStyle = Integer.parseInt(GUISettings.get("FFontStyle").toString());
        }
        //System.out.println(FontName + ":" + FontSize);
        textPane.setFont(new Font(FontName, FontStyle, FontSize));
        if (GUISettings.containsKey("FFontColor")) {
            textPane.setForeground(Color.decode(GUISettings.get("FFontColor").toString()));
        } else {
            textPane.setForeground(Color.RED);
        }
        new Thread("Visual Alert!") {
            @Override
            public void run() {
                String image = "";
                if (GUISettings.containsKey("FollowIMG")) {
                    image = GUISettings.get("FollowIMG").toString();
                }
                if (image.toLowerCase().contains(".gif")) {
                    ImageIcon imageIcon = new ImageIcon(image);
                    ImageViewer.setHorizontalAlignment(JLabel.CENTER);
                    ImageViewer.setVerticalAlignment(JLabel.CENTER);
                    ImageViewer.setIcon(imageIcon);
                    ImageViewer.add(textPane);
                    try {
                        //AlertMSG.setText(FollowMessage);

                        Thread.sleep(5000);
                        //AlertMSG.setText("");
                        textPane.setText("");
                        ShowingImg = false;
                        playMP3.close();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AlertFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    ImageViewer.setIcon(null);
                } else {
                    BufferedImage img = null;
                    try {
                        if (image.equals("")) {
                            img = ImageIO.read(this.getClass().getResourceAsStream("/assets/gir.png"));
                        } else {
                            img = ImageIO.read(new File(image));
                        }

                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    Image dimg = null;
                    if (img.getHeight() > img.getWidth()) {
                        dimg = img.getScaledInstance(-1, ImageViewer.getHeight(), Image.SCALE_SMOOTH);
                    } else if (img.getWidth() > img.getHeight()) {
                        dimg = img.getScaledInstance(ImageViewer.getWidth(), -1, Image.SCALE_SMOOTH);
                    } else {
                        dimg = img;
                    }

                    ImageIcon imageIcon = new ImageIcon(dimg);
                    ImageViewer.setHorizontalAlignment(JLabel.CENTER);
                    ImageViewer.setVerticalAlignment(JLabel.CENTER);
                    ImageViewer.setIcon(imageIcon);
                    ImageViewer.add(textPane);

                    try {
                        //AlertMSG.setText(FollowMessage);

                        Thread.sleep(10000);
                        //AlertMSG.setText("");
                        textPane.setText("");
                        playMP3.close();
                        ShowingImg = false;
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AlertFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    ImageViewer.setIcon(null);
                }
            }
        }.start();
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (PlayingAudio || ShowingImg) {
            return;
        }
        this.BeginAlert("Test");

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (!playMP3.isComplete()) {
            playMP3.close();
        }
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlertFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlertFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlertFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlertFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlertFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AlertBG;
    private javax.swing.JLabel ImageViewer;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
